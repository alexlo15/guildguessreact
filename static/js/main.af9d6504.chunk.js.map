{"version":3,"sources":["components/GuildCard/index.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["GuildCard","props","className","onClick","guildClick","id","name","alt","src","image","class","Nav","href","this","win","loss","highscore","score","Component","App","state","guilds","clicked","sortGuilds","sort","a","b","Math","random","setHighScore","setState","reset","handleWin","handleLoss","event","currentGuild","target","indexOf","concat","map","guild","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6gEAYeA,G,MATG,SAAAC,GAAK,OACnB,yBAAKC,UAAU,kCAAkCC,QAASF,EAAMG,YAC9D,yBAAKF,UAAU,iBACb,yBAAKG,GAAIJ,EAAMK,KAAMC,IAAKN,EAAMK,KAAME,IAAKP,EAAMQ,QACjD,yBAAKC,MAAM,YAAYT,EAAMK,U,OCStBK,G,uLAXX,OACE,yBAAKT,UAAU,0CACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,QAAO,uBAAGU,KAAK,KAAR,gBACvB,0BAAMV,UAAU,SAAhB,WAAmCW,KAAKZ,MAAMa,IAA9C,iBAAqED,KAAKZ,MAAMc,KAAhF,oBAA2GF,KAAKZ,MAAMe,UAAtH,yBAA2JH,KAAKZ,MAAMgB,MAAtK,e,GANQC,cC2HHC,G,iNArHbC,MAAQ,CACNC,SACAC,QAAS,GACTL,MAAO,EACPD,UAAW,EACXD,KAAM,EACND,IAAK,G,EAKPS,WAAa,WACX,EAAKH,MAAMC,OAAOG,KAAK,SAACC,EAAGC,GAAQ,MAAO,GAAMC,KAAKC,Y,EAIvDC,aAAe,WACT,EAAKT,MAAMH,MAAQ,EAAKG,MAAMJ,WAChC,EAAKc,SAAS,CACZd,UAAW,EAAKI,MAAMH,S,EAM5Bc,MAAQ,WACN,EAAKF,eACL,EAAKC,SAAS,CACZR,QAAS,GACTL,MAAO,K,EAKXe,UAAY,WACV,EAAKF,SAAS,CACZhB,IAAK,EAAKM,MAAMN,IAAM,K,EAK1BmB,WAAa,WACX,EAAKH,SAAS,CACZf,KAAM,EAAKK,MAAML,KAAO,K,EAM5BX,WAAa,SAAA8B,GAEX,IAAMC,EAAeD,EAAME,OAAO/B,GAEhB,EAAKe,MAAME,QAAQe,QAAQF,IAAiB,GAI5D,EAAKZ,aACL,EAAKQ,QACL,EAAKE,eAIL,EAAKV,aACL,EAAKO,SAAS,CAEZR,QAAS,EAAKF,MAAME,QAAQgB,OAAOH,GACnClB,MAAO,EAAKG,MAAMH,MAAQ,GAG1B,WAC2B,KAArB,EAAKG,MAAMH,QACb,EAAKM,aACL,EAAKQ,QACL,EAAKC,iB,wEAQL,IAAD,OACP,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,CACEY,IAAKD,KAAKO,MAAMN,IAChBC,KAAMF,KAAKO,MAAML,KACjBC,UAAWH,KAAKO,MAAMJ,UACtBC,MAAOJ,KAAKO,MAAMH,QAEpB,yBAAKP,MAAM,6BACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,eACA,uBAAGA,MAAM,QAAT,4BAGJ,yBAAKR,UAAU,aACb,yBAAKA,UAAU,OACZW,KAAKO,MAAMC,OAAOkB,IAAI,SAAAC,GAAK,OAC1B,kBAAC,EAAD,CACEpC,WAAY,EAAKA,WACjBC,GAAImC,EAAMnC,GACVoC,IAAKD,EAAMnC,GACXC,KAAMkC,EAAMlC,KACZG,MAAO+B,EAAM/B,YAKrB,6BAAS,6BAAS,6BAAS,kC,GAhHjBS,cCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.af9d6504.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst GuildCard = props =>(\n    <div className=\"card col-sm-6 col-md-4 col-lg-2\" onClick={props.guildClick}>\n      <div className=\"img-container\">\n        <img id={props.name} alt={props.name} src={props.image} />\n        <div class=\"centered\">{props.name}</div>\n      </div>\n    </div>\n);\n\nexport default GuildCard;\n","import React, { Component } from 'react';\r\nimport './Nav.css';\r\n\r\nclass Nav extends Component {\r\n  render () {\r\n    return (\r\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n        <div className='nav-wrapper'>\r\n          <span className=\"left\"><a href=\"/\">Guild Game </a></span>\r\n          <span className=\"right\"> &nbsp;W: {this.props.win} &nbsp;|&nbsp;L : {this.props.loss} &nbsp;|&nbsp; HIGH: {this.props.highscore} &nbsp; | &nbsp; Current: {this.props.score} &nbsp;</span>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Nav;","import React, { Component } from \"react\";\nimport GuildCard from \"./components/GuildCard/index\";\nimport guilds from \"./guilds.json\";\nimport Nav from \"./components/Nav/Nav\";\nimport \"./style.css\";\n\n\nclass App extends Component {\n  // Setting the initial state of things\n  state = {\n    guilds,\n    clicked: [],\n    score: 0,\n    highscore: 0,\n    loss: 0,\n    win: 0,\n  };\n\n\n  // sort the guilds function\n  sortGuilds = () => {\n    this.state.guilds.sort((a, b) => { return 0.5 - Math.random() });\n  };\n\n  // set the high score\n  setHighScore = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({\n        highscore: this.state.score\n      });\n    }\n  };\n\n  // reset function to reset things when the game is lost\n  reset = () => {\n    this.setHighScore();\n    this.setState({\n      clicked: [],\n      score: 0\n    })\n  };\n\n  // tally wins\n  handleWin = () => {\n    this.setState({\n      win: this.state.win + 1\n    });\n  };\n\n  // and losses\n  handleLoss = () => {\n    this.setState({\n      loss: this.state.loss + 1\n    });\n  };\n\n\n  // onclick event\n  guildClick = event => {\n    // this is our clicked guild\n    const currentGuild = event.target.id;\n    // check to see if that guild has been clicked\n    const isClicked = this.state.clicked.indexOf(currentGuild) > -1;\n\n    // if that guild is clicked reset\n    if (isClicked) {\n      this.sortGuilds();\n      this.reset();\n      this.handleLoss();\n\n    } else {\n      // else set score and shuffle\n      this.sortGuilds();\n      this.setState({\n        // add current to clicked guilds\n        clicked: this.state.clicked.concat(currentGuild),\n        score: this.state.score + 1\n      },\n        // on wins reset and tally\n        () => {\n          if (this.state.score === 10) {\n            this.sortGuilds();\n            this.reset();\n            this.handleWin();\n          }\n        });\n    }\n  };\n\n\n\n  render() {\n    return (\n      <div className='App'>\n        <Nav\n          win={this.state.win}\n          loss={this.state.loss}\n          highscore={this.state.highscore}\n          score={this.state.score}\n        />\n        <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <h1 class=\"display-8\">Guild Guess</h1>\n            <p class=\"lead\">Click each guild once!</p>\n          </div>\n        </div>\n        <div className='container'>\n          <div className='row'>\n            {this.state.guilds.map(guild => (\n              <GuildCard\n                guildClick={this.guildClick}\n                id={guild.id}\n                key={guild.id}\n                name={guild.name}\n                image={guild.image}\n              />\n            ))}\n          </div>\n        </div>\n        <br></br><br></br><br></br><br></br>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}